class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
        if(grid==null||grid.length==0||grid[0].length==0)
        {
            return -1;
        }
        
        int n=grid.length;
        int m=grid[0].length;
        
        if(grid[0][0]==1||grid[n-1][m-1]==1)
        {
            return -1;
        }
        
        int[][] dir={{1,1},{1,-1},{-1,1},{-1,-1},{0,1},{0,-1},{1,0},{-1,0}};
        //all the possible direction
        
        boolean[][] visited=new boolean[n][m];
        
        int path=0;
        Queue<int[]>q=new LinkedList<int[]>();
        
        visited[0][0]=true;
        q.add(new int[] {0,0});
        
        while(q.size()!=0)
        {
            int size=q.size();
            path++;
            for(int i=0;i<size;i++)
            {
                int[] currPos=q.poll();
                
                if(currPos[0]==n-1&&currPos[1]==m-1)
                {
                    return path;
                }
                for(int[] allPossibleDir:dir)
                {
                    int X=currPos[0]+allPossibleDir[0];
                    int Y=currPos[1]+allPossibleDir[1];
                    
                    if(X<0||Y<0||X>=n||Y>=m||visited[X][Y]||grid[X][Y]==1)
                    {
                        continue;
                    }
                    
                    visited[X][Y]=true;
                    q.add(new int[] {X,Y});
                    
                }
                
            }
        }
        return -1;
    }
}
